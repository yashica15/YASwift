//
//  Utility.swift
//  SupplyMedicine
//
//  Created by GalaxyWeblinks on 12/21/15.
//  Copyright Â© 2015 GalaxyWeblinks. All rights reserved.
//

import Foundation
import UIKit

class Utility: NSObject {
    
    func deviceUUID() -> String {
        var strUUID = getUserDefault(NSBundle.mainBundle().bundleIdentifier!) as! String
        if strUUID != "" {
            return strUUID
        } else {
            strUUID = NSUUID().UUIDString
            setUserDefault(NSBundle.mainBundle().bundleIdentifier!, value: strUUID)
            return strUUID
        }
    }
    
    // Set NSUserDefaults
    func setUserDefault(key:String, value:String) {
        let defaults : AnyObject? = NSUserDefaults.standardUserDefaults()
        
        if (defaults != nil) {
            defaults!.setObject(value, forKey: key)
            defaults!.synchronize()
        } else {
            print("Unable to save \(key) = \(value) to user defaults")
        }
    }
    
    func removeUserDefault(key:String) {
        let defaults : AnyObject? = NSUserDefaults.standardUserDefaults()
        
        if (defaults != nil) {
            defaults!.removeObjectForKey(key)
            defaults!.synchronize()
        }
    }
    
    func removeAllUserDefault() {
        let defaults : AnyObject? = NSUserDefaults.standardUserDefaults()
        
        if (defaults != nil) {
            let dict : Dictionary = (defaults?.dictionaryRepresentation())!
            for key in dict {
                defaults!.removeObjectForKey(String(key))
            }
            defaults!.synchronize()
        }
    }
    
    func getUserDefault(key:String) -> AnyObject {
        let defaults : AnyObject? = NSUserDefaults.standardUserDefaults()
        var value : AnyObject? = nil
        if (defaults != nil) {
            value = defaults!.objectForKey(key)
        }
        if value == nil {
            value = ""
            print("user defaults may not have been exist...")
            defaults!.synchronize()
        }
     return value!
    }
    
    
    func checkNullObject(key : String, dict : NSDictionary) -> AnyObject {
        var value = dict.valueForKey(key)
        if((value?.isKindOfClass(NSNull) != nil) && value != nil) {
            if (value?.isKindOfClass(NSString) == nil) {
                return "";
            } else if value is NSNull {
                return "";
            }else if(value?.isKindOfClass(NSArray) == nil) {
                return []
            }            
            return value!;
        }
        value = "";
        return value!;
    }
    
    func encodeToBase64String(image:UIImage) -> String {
        return UIImagePNGRepresentation(image)!.base64EncodedStringWithOptions(.Encoding64CharacterLineLength)
    }
    
    func decodeToBase64String(base64String:String) -> NSData {
        return NSData(base64EncodedString: base64String, options: NSDataBase64DecodingOptions.IgnoreUnknownCharacters)!
    }
    
    func arrayEncodeToBase64String(arrData : NSArray? ) throws-> NSMutableArray {
        let arrStringData:NSMutableArray! = NSMutableArray()
        if arrData != nil{
            for image in arrData! {
                let objData = encodeToBase64String(image as! UIImage)
                arrStringData.addObject(objData)
            }
            return arrStringData
        }
        return arrStringData
    }
    
    func getImageWithColor(color: UIColor, size: CGSize) -> UIImage {
        let rect = CGRectMake(0, 0, size.width, size.height)
        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        color.setFill()
        UIRectFill(rect)
        let image: UIImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        return image
    }
    
    ////
    func heightOfAttrbuitedText(width: CGFloat, string:NSMutableAttributedString) -> CGFloat {
        let rect: CGSize = string.boundingRectWithSize(CGSizeMake(width, 10000), options:NSStringDrawingOptions.UsesLineFragmentOrigin, context: nil).size as CGSize
        return rect.height
    }
    
    func resizeImage(image: UIImage, newWidth: CGFloat) -> UIImage {
        
        let scale = newWidth / image.size.width
        let newHeight = image.size.height * scale
        UIGraphicsBeginImageContext(CGSizeMake(newWidth, newHeight))
        image.drawInRect(CGRectMake(0, 0, newWidth, newHeight))
        let newImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return newImage
    }
}